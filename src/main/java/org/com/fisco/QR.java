package org.com.fisco;

import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.*;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple7;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@SuppressWarnings("unchecked")
public class QR extends Contract {
    public static final String[] BINARY_ARRAY = {"","6001836020036101000a0380198251168184511680821785525050505050509050019150506020604051808303816000865af1158015610ff1573d6000803e3d6000fd5b5050506040513d602081101561100657600080fd5b8101908080519060200190929190505050905060015460001916600560008d600019166000191681526020019081526020016000206004015460001916141580611078575060056000826000191660001916815260200190815260200160002060000160009054906101000a900460ff165b156110fa577fa5157a450e265601e9971d95e33234530d61a9f622c379fb65c50686881b552481336040518083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a160015497506112e6565b600560008c6000191660001916815260200190815260200160002060000160019054906101000a900460ff1615611174577f7a737c61034d1deb25959871eb79044f39f19b77c3906a5c99e7bb40f08f71eb8b60405180826000191660001916815260200191505060405180910390a160015497506112e6565b80600560008d600019166000191681526020019081526020016000206004018160001916905550600160056000836000191660001916815260200190815260200160002060000160006101000a81548160ff021916908315150217905550600060056000836000191660001916815260200190815260200160002060000160016101000a81548160ff0219169083151502179055506000600560008360001916600019168152602001908152602001600020600101819055508060056000836000191660001916815260200190815260200160002060030181600019169055508a600560008360001916600019168152602001908152602001600020600201816000191690555060015460056000836000191660001916815260200190815260200160002060040181600019169055508860056000836000191660001916815260200190815260200160002060050190805190602001906112d6929190611b7d565b506112e081610ba9565b50508097505b505050505050509392505050565b600080600080600154600019168660001916141561131a576000600154935093506113e7565b856000191687600019161115611363576113568760076000896000191660001916815260200190815260200160002060030154600188016112f4565b80925081935050506113ca565b8560001916876000191610156113ac5761139f8760076000896000191660001916815260200190815260200160002060020154600188016112f4565b80925081935050506113c9565b8560001916876000191614156113c857600186935093506113e7565b5b5b60015460001916816000191614156113e0578590505b8181935093505b5050935093915050565b60006001546000191660076000856000191660001916815260200190815260200160002060020154600019161480156114515750600154600019166007600084600019166000191681526020019081526020016000206000015460001916145b156114ad57816007600085600019166000191681526020019081526020016000206002018160001916905550826007600084600019166000191681526020019081526020016000206000018160001916905550600190506114b2565b600090505b92915050565b60006001546000191660076000856000191660001916815260200190815260200160002060030154600019161480156115185750600154600019166007600084600019166000191681526020019081526020016000206000015460001916145b156115745781600760008560001916600019168152602001908152602001600020600301816000191690555082600760008460001916600019168152602001908152602001600020600001816000191690555060019050611579565b600090505b92915050565b60008060008060008060008560001916886000191610945060076000896000191660001916815260200190815260200160002060000154955060076000876000191660001916815260200190815260200160002060040160009054906101000a900460ff1615611631577f8ceaf63ce0f6b4742690856dbf567c1e578eab9fce876f2f3fb25f61541bf1c58860405180826000191660001916815260200191505060405180910390a1600196506117b7565b60076000876000191660001916815260200190815260200160002060000154915081600019168660001916109350831561168b576007600083600019166000191681526020019081526020016000206003015490506116ad565b6007600083600019166000191681526020019081526020016000206002015490505b60076000826000191660001916815260200190815260200160002060040160009054906101000a900460ff16925082156117065783156116f6576116f086611836565b50611701565b6116ff86611995565b505b6117b6565b600160076000886000191660001916815260200190815260200160002060040160006101000a81548160ff021916908315150217905550600160076000836000191660001916815260200190815260200160002060040160006101000a81548160ff021916908315150217905550600060076000846000191660001916815260200190815260200160002060040160006101000a81548160ff0219169083151502179055506117b48261157f565b505b5b505050505050919050565b60008160068160001916905550816007600084600019166000191681526020019081526020016000206001018160001916905550600160076000846000191660001916815260200190815260200160002060040160006101000a81548160ff02191690831515021790555060019050919050565bbb60a060405190810160405280600080191681526020016000801916815260200160008019168152602001600080191681526020016000151581525090565b60e06040519081016040528060001515815260200160001515815260200160008152602001600080191681526020016000801916815260200160008019168152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611bbe57805160ff1916838001178555611bec565b82800160010185558215611bec579182015b82811115611beb578251825591602001919060010190611bd0565b5b509050611bf99190611bfd565b5090565b611c1f91905b80821115611c1b576000816000905550600101611c03565b5090565b905600a165627a7a723058205187c065c609f3c5d908ddab18c05adb611112057e240cc730195145414de8990029"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","ffffffffffffffffffffffffffffff1681526020019250505060405180910390a160015497506111c4565b600560008c6000191660001916815260200190815260200160002060000160019054906101000a900460ff1615611052577fbd44ce0d3bb3f3d952662f7e3082acf2ab6f6838ba9d39a57825002f342401238b60405180826000191660001916815260200191505060405180910390a160015497506111c4565b80600560008d600019166000191681526020019081526020016000206004018160001916905550600160056000836000191660001916815260200190815260200160002060000160006101000a81548160ff021916908315150217905550600060056000836000191660001916815260200190815260200160002060000160016101000a81548160ff0219169083151502179055506000600560008360001916600019168152602001908152602001600020600101819055508060056000836000191660001916815260200190815260200160002060030181600019169055508a600560008360001916600019168152602001908152602001600020600201816000191690555060015460056000836000191660001916815260200190815260200160002060040181600019169055508860056000836000191660001916815260200190815260200160002060050190805190602001906111b4929190611b7e565b506111be816111d2565b50508097505b505050505050509392505050565b60008060008060015460001916600654600019161415156112c6576111fb8560065460006112f5565b80935081925050508015611254577f8486eda08ee433a6a9d6837e1552a09eb8a6899d03ad377823031a7a4e25b9c48560405180826000191660001916815260200191505060405180910390a1600082935093506112ee565b600060076000876000191660001916815260200190815260200160002060040160006101000a81548160ff0219169083151502179055508160001916856000191610156112ab576112a582866113f2565b506112b7565b6112b582866114b9565b505b6112c085611580565b506112e6565b600154600019166006546000191614156112e5576112e3856117c3565b505b5b600182935093505b5050915091565b600080600080600154600019168660001916141561131b576000600154935093506113e8565b856000191687600019161115611364576113578760076000896000191660001916815260200190815260200160002060030154600188016112f5565b80925081935050506113cb565b8560001916876000191610156113ad576113a08760076000896000191660001916815260200190815260200160002060020154600188016112f5565b80925081935050506113ca565b8560001916876000191614156113c957600186935093506113e8565b5b5b60015460001916816000191614156113e1578590505b8181935093505b5050935093915050565b60006001546000191660076000856000191660001916815260200190815260200160002060020154600019161480156114525750600154600019166007600084600019166000191681526020019081526020016000206000015460001916145b156114ae57816007600085600019166000191681526020019081526020016000206002018160001916905550826007600084600019166000191681526020019081526020016000206000018160001916905550600190506114b3565b600090505b92915050565b60006001546000191660076000856000191660001916815260200190815260200160002060030154600019161480156115195750600154600019166007600084600019166000191681526020019081526020016000206000015460001916145b15611575578160076000856000191660001916815260200190815260200160002060030181600019169055508260076000846000191660001916815260200190815260200160002060000181600019169055506001905061157a565b600090505b92915050565b60008060008060008060008560001916886000191610945060076000896000191660001916815260200190815260200160002060000154955060076000876000191660001916815260200190815260200160002060040160009054906101000a900460ff1615611632577fdc5ea224e9178628c24239dfdc521cf68ae0414c8a7bd4a9ce26bf01c1c3426e8860405180826000191660001916815260200191505060405180910390a1600196506117b8565b60076000876000191660001916815260200190815260200160002060000154915081600019168660001916109350831561168c576007600083600019166000191681526020019081526020016000206003015490506116ae565b6007600083600019166000191681526020019081526020016000206002015490505b60076000826000191660001916815260200190815260200160002060040160009054906101000a900460ff16925082156117075783156116f7576116f186611837565b50611702565b61170086611996565b505b6117b7565b600160076000886000191660001916815260200190815260200160002060040160006101000a81548160ff021916908315150217905550600160076000836000191660001916815260200190815260200160002060040160006101000a81548160ff021916908315150217905550600060076000846000191660001916815260200190815260200160002060040160006101000a81548160ff0219169083151502179055506117b582611580565b505b5b505050505050919050565b60008160068160001916905550816007600084600019166000191681526020019081526020016000206001018160001916905550600160076000846000191660001916815260200190815260200160002060040160006101000a81548160ff02191690831515021790555060019050919050565bbb60e06040519081016040528060001515815260200160001515815260200160008152602001600080191681526020016000801916815260200160008019168152602001606081525090565b60a060405190810160405280600080191681526020016000801916815260200160008019168152602001600080191681526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611bbf57805160ff1916838001178555611bed565b82800160010185558215611bed579182015b82811115611bec578251825591602001919060010190611bd1565b5b509050611bfa9190611bfe565b5090565b611c2091905b80821115611c1c576000816000905550600101611c04565b5090565b905600a165627a7a723058205feb93ddfc776146a26b3a441bf2d4ee5a2cb219d0f135f5370d165e84e6fd0f0029"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"createQRCoin\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getSolVersion\",\"outputs\":[{\"name\":\"version\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addAdministrator\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getTreeNodeInform\",\"outputs\":[{\"name\":\"parentHash\",\"type\":\"bytes32\"},{\"name\":\"thisHash\",\"type\":\"bytes32\"},{\"name\":\"leftHash\",\"type\":\"bytes32\"},{\"name\":\"rightHash\",\"type\":\"bytes32\"},{\"name\":\"black\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"logoutQRCoin\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"getQRCoinInform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"QRHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"}],\"name\":\"errorCreateQRCoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"QRHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"}],\"name\":\"errorAddQRCoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"QRHash\",\"type\":\"bytes32\"}],\"name\":\"addedNodeAlreadyExists\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"QRhash\",\"type\":\"bytes32\"}],\"name\":\"addNodeParentBlack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lastHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"len\",\"type\":\"uint256\"}],\"name\":\"overflowDataLength\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lastHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"len\",\"type\":\"uint256\"}],\"name\":\"overflowNoteLength\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lastHash\",\"type\":\"bytes32\"}],\"name\":\"NotExistLastHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"NotExistLogoutHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"hashHaveLogouted\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_CREATEQRCOIN = "createQRCoin";

    public static final String FUNC_GETSOLVERSION = "getSolVersion";

    public static final String FUNC_ADDADMINISTRATOR = "addAdministrator";

    public static final String FUNC_GETTREENODEINFORM = "getTreeNodeInform";

    public static final String FUNC_LOGOUTQRCOIN = "logoutQRCoin";

    public static final String FUNC_GETQRCOININFORM = "getQRCoinInform";

    public static final Event ERRORCREATEQRCOIN_EVENT = new Event("errorCreateQRCoin", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event ERRORADDQRCOIN_EVENT = new Event("errorAddQRCoin", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event ADDEDNODEALREADYEXISTS_EVENT = new Event("addedNodeAlreadyExists", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event ADDNODEPARENTBLACK_EVENT = new Event("addNodeParentBlack", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event OVERFLOWDATALENGTH_EVENT = new Event("overflowDataLength", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OVERFLOWNOTELENGTH_EVENT = new Event("overflowNoteLength", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event NOTEXISTLASTHASH_EVENT = new Event("NotExistLastHash", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event NOTEXISTLOGOUTHASH_EVENT = new Event("NotExistLogoutHash", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event HASHHAVELOGOUTED_EVENT = new Event("hashHaveLogouted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    protected QR(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt createQRCoin(byte[] data) {
        final Function function = new Function(
                FUNC_CREATEQRCOIN, 
                Arrays.<Type>asList(new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void createQRCoin(byte[] data, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEQRCOIN,
                Arrays.<Type>asList(new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateQRCoin(byte[] data) {
        final Function function = new Function(
                FUNC_CREATEQRCOIN,
                Arrays.<Type>asList(new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getCreateQRCoinInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEQRCOIN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public Tuple1<byte[]> getCreateQRCoinOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEQRCOIN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt getSolVersion() {
        final Function function = new Function(
                FUNC_GETSOLVERSION,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getSolVersion(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETSOLVERSION,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetSolVersion() {
        final Function function = new Function(
                FUNC_GETSOLVERSION,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getGetSolVersionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETSOLVERSION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt addAdministrator() {
        final Function function = new Function(
                FUNC_ADDADMINISTRATOR,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addAdministrator(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDADMINISTRATOR,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddAdministrator() {
        final Function function = new Function(
                FUNC_ADDADMINISTRATOR,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getAddAdministratorOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDADMINISTRATOR,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt getTreeNodeInform(byte[] hash) {
        final Function function = new Function(
                FUNC_GETTREENODEINFORM,
                Arrays.<Type>asList(new Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getTreeNodeInform(byte[] hash, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETTREENODEINFORM,
                Arrays.<Type>asList(new Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetTreeNodeInform(byte[] hash) {
        final Function function = new Function(
                FUNC_GETTREENODEINFORM,
                Arrays.<Type>asList(new Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getGetTreeNodeInformInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETTREENODEINFORM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public Tuple5<byte[], byte[], byte[], byte[], Boolean> getGetTreeNodeInformOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETTREENODEINFORM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<byte[], byte[], byte[], byte[], Boolean>(

                (byte[]) results.get(0).getValue(),
                (byte[]) results.get(1).getValue(),
                (byte[]) results.get(2).getValue(),
                (byte[]) results.get(3).getValue(),
                (Boolean) results.get(4).getValue()
                );
    }

    public TransactionReceipt logoutQRCoin(byte[] hash) {
        final Function function = new Function(
                FUNC_LOGOUTQRCOIN,
                Arrays.<Type>asList(new Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void logoutQRCoin(byte[] hash, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_LOGOUTQRCOIN,
                Arrays.<Type>asList(new Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForLogoutQRCoin(byte[] hash) {
        final Function function = new Function(
                FUNC_LOGOUTQRCOIN,
                Arrays.<Type>asList(new Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getLogoutQRCoinInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_LOGOUTQRCOIN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public Tuple1<byte[]> getLogoutQRCoinOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_LOGOUTQRCOIN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt getQRCoinInform(byte[] hash, byte[] data, String note) {
        final Function function = new Function(
                FUNC_GETQRCOININFORM,
                Arrays.<Type>asList(new Bytes32(hash),
                new DynamicBytes(data),
                new Utf8String(note)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getQRCoinInform(QR qrSol, byte[] hash, byte[] data, String note, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETQRCOININFORM,
                Arrays.<Type>asList(new Bytes32(hash),
                new DynamicBytes(data),
                new Utf8String(note)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetQRCoinInform(byte[] hash, byte[] data, String note) {
        final Function function = new Function(
                FUNC_GETQRCOININFORM,
                Arrays.<Type>asList(new Bytes32(hash),
                new DynamicBytes(data),
                new Utf8String(note)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<byte[], byte[], String> getGetQRCoinInformInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETQRCOININFORM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<byte[], byte[], String>(

                (byte[]) results.get(0).getValue(),
                (byte[]) results.get(1).getValue(),
                (String) results.get(2).getValue()
                );
    }

    public Tuple7<Boolean, byte[], byte[], byte[], byte[], BigInteger, String> getGetQRCoinInformOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETQRCOININFORM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple7<Boolean, byte[], byte[], byte[], byte[], BigInteger, String>(

                (Boolean) results.get(0).getValue(),
                (byte[]) results.get(1).getValue(),
                (byte[]) results.get(2).getValue(),
                (byte[]) results.get(3).getValue(),
                (byte[]) results.get(4).getValue(),
                (BigInteger) results.get(5).getValue(),
                (String) results.get(6).getValue()
                );
    }

    public List<ErrorCreateQRCoinEventResponse> getErrorCreateQRCoinEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ERRORCREATEQRCOIN_EVENT, transactionReceipt);
        ArrayList<ErrorCreateQRCoinEventResponse> responses = new ArrayList<ErrorCreateQRCoinEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ErrorCreateQRCoinEventResponse typedResponse = new ErrorCreateQRCoinEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.QRHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.errorCreateQRCoinParam0 = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeErrorCreateQRCoinEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ERRORCREATEQRCOIN_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeErrorCreateQRCoinEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ERRORCREATEQRCOIN_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ErrorAddQRCoinEventResponse> getErrorAddQRCoinEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ERRORADDQRCOIN_EVENT, transactionReceipt);
        ArrayList<ErrorAddQRCoinEventResponse> responses = new ArrayList<ErrorAddQRCoinEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ErrorAddQRCoinEventResponse typedResponse = new ErrorAddQRCoinEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.QRHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.errorAddQRCoinParam0 = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeErrorAddQRCoinEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ERRORADDQRCOIN_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeErrorAddQRCoinEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ERRORADDQRCOIN_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<AddedNodeAlreadyExistsEventResponse> getAddedNodeAlreadyExistsEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ADDEDNODEALREADYEXISTS_EVENT, transactionReceipt);
        ArrayList<AddedNodeAlreadyExistsEventResponse> responses = new ArrayList<AddedNodeAlreadyExistsEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AddedNodeAlreadyExistsEventResponse typedResponse = new AddedNodeAlreadyExistsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.QRHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeAddedNodeAlreadyExistsEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ADDEDNODEALREADYEXISTS_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeAddedNodeAlreadyExistsEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ADDEDNODEALREADYEXISTS_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<AddNodeParentBlackEventResponse> getAddNodeParentBlackEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ADDNODEPARENTBLACK_EVENT, transactionReceipt);
        ArrayList<AddNodeParentBlackEventResponse> responses = new ArrayList<AddNodeParentBlackEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AddNodeParentBlackEventResponse typedResponse = new AddNodeParentBlackEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.QRhash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeAddNodeParentBlackEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ADDNODEPARENTBLACK_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeAddNodeParentBlackEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ADDNODEPARENTBLACK_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<OverflowDataLengthEventResponse> getOverflowDataLengthEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OVERFLOWDATALENGTH_EVENT, transactionReceipt);
        ArrayList<OverflowDataLengthEventResponse> responses = new ArrayList<OverflowDataLengthEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OverflowDataLengthEventResponse typedResponse = new OverflowDataLengthEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.lastHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.len = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOverflowDataLengthEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OVERFLOWDATALENGTH_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOverflowDataLengthEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OVERFLOWDATALENGTH_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<OverflowNoteLengthEventResponse> getOverflowNoteLengthEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OVERFLOWNOTELENGTH_EVENT, transactionReceipt);
        ArrayList<OverflowNoteLengthEventResponse> responses = new ArrayList<OverflowNoteLengthEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OverflowNoteLengthEventResponse typedResponse = new OverflowNoteLengthEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.lastHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.len = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOverflowNoteLengthEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OVERFLOWNOTELENGTH_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOverflowNoteLengthEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OVERFLOWNOTELENGTH_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<NotExistLastHashEventResponse> getNotExistLastHashEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NOTEXISTLASTHASH_EVENT, transactionReceipt);
        ArrayList<NotExistLastHashEventResponse> responses = new ArrayList<NotExistLastHashEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NotExistLastHashEventResponse typedResponse = new NotExistLastHashEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.lastHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeNotExistLastHashEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(NOTEXISTLASTHASH_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeNotExistLastHashEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(NOTEXISTLASTHASH_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<NotExistLogoutHashEventResponse> getNotExistLogoutHashEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NOTEXISTLOGOUTHASH_EVENT, transactionReceipt);
        ArrayList<NotExistLogoutHashEventResponse> responses = new ArrayList<NotExistLogoutHashEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NotExistLogoutHashEventResponse typedResponse = new NotExistLogoutHashEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.hash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeNotExistLogoutHashEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(NOTEXISTLOGOUTHASH_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeNotExistLogoutHashEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(NOTEXISTLOGOUTHASH_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<HashHaveLogoutedEventResponse> getHashHaveLogoutedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(HASHHAVELOGOUTED_EVENT, transactionReceipt);
        ArrayList<HashHaveLogoutedEventResponse> responses = new ArrayList<HashHaveLogoutedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            HashHaveLogoutedEventResponse typedResponse = new HashHaveLogoutedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.hash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeHashHaveLogoutedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(HASHHAVELOGOUTED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeHashHaveLogoutedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(HASHHAVELOGOUTED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static QR load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new QR(contractAddress, client, credential);
    }

    public static QR deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(QR.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class ErrorCreateQRCoinEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] QRHash;

        public String errorCreateQRCoinParam0;
    }

    public static class ErrorAddQRCoinEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] QRHash;

        public String errorAddQRCoinParam0;
    }

    public static class AddedNodeAlreadyExistsEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] QRHash;
    }

    public static class AddNodeParentBlackEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] QRhash;
    }

    public static class OverflowDataLengthEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] lastHash;

        public BigInteger len;
    }

    public static class OverflowNoteLengthEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] lastHash;

        public BigInteger len;
    }

    public static class NotExistLastHashEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] lastHash;
    }

    public static class NotExistLogoutHashEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] hash;
    }

    public static class HashHaveLogoutedEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] hash;
    }
}
